.global _start

_start:
main:
	ldr R0, =memory_size
	str SP, [R0]

	sub R4, SP, R0
	lsr R1, R4, #2
	sub R1, R1, #2

	mov R0, #0
	bal add_range
	
return0:
	mov R3, #1
	bal sum_stack
	
return1:
	mov R1, #50
	mov R2, #4
	push {R1, R2}
	
	mov R3, #2
	bal sum_stack
	
return2:
	pop {R0}
	
	bx LR
	
//   Uses: {R0, R1}
//  Input: R0 - Starting Value
//         R1 - Ending Value
// Output: R0 to R1 on Stack
add_range:
	cmp R0, R1
	bgt return0
	
	push {R0}
	add R0, R0, #1
	bal add_range
		
//   Uses: {R0, R1, R2, R3}
//  Input: To Sum - Entire stack
//         Return # - R3
// Output: R0 and top of stack
sum_stack:
	mov R0, #0
	
sum_stack_recur:
	pop {R1}
	add R0, R0, R1
	
	ldr R2, =memory_size
	ldr R2, [R2]
	cmp SP, R2 // Memory size in bytes
	
	bne sum_stack_recur
	push {R0}
	
	cmp R3, #1
	beq return1
	
	cmp R3, #2
	beq return2

.data
	memory_size: .word 0 // Set to initial stack size
